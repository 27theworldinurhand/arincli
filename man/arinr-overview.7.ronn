arinr-overview(7) -- ARIN RESTful Commands in Ruby
==================================================

## DESCRIPTION

ARINr is a set of Ruby scripts that utilize both the Whois-RWS(7) service and the 
Reg-RWS(7) service. Whois-RWS(7) is ARIN's Whois/NICNAME RESTful web service for
exposing IP network and ASN registration data to the public (Note this service
pre-dates the IETF WEIRDS/RDAP service and is not yet compatible with that
specification). Reg-RWS(7) is ARIN's
registration RESTful web service available to customers of ARIN.

At the time of this writing, the ARINr scripts should be considered **alpha**
quality. A lot of functionality is still missing from the scripts, and ARIN 
has not conducted any qualified degree of quality assurance against them.

## COMMANDS

  * arinw(1) queries ARIN's Whois-RWS(7) service.

  * arinu(1) is a utility for managing ARINr scripts.

## CONFIGURATION

The ARINr commands all use an application data directory to store configuration
files, caches, etc. The arinu(1) command can be used to manipulate the caches
and configuration. This application data directory is `$HOME/.ARINr` for Unix
and Unix-like systems, and `%APPDATA%\ARINr` for Windows. This directory is
created automatically the first time an ARINr command is run.

Configuration is kept in the `config.yaml` file in the application data directory.
This is a YAML file and so YAML syntax is required. YAML is designed to be human
friendly yet machine parsable. For users of Reg-RWS(7), the API Key given will
likely need be changed to the users real API key. An API Key can be obtained
via [ARIN Online](http://www.arin.net/public). An API Key is not needed for
Whois-RWS(7).

## INSTALLATION

At present, the only way to install the ARINr scripts is from the source
using Git. The ARINr commands are Ruby programs, and Ruby 1.8.7 and above
are needed.

To get the code, clone the repository using the following command:
_git clone http://stash-projects.arin.net:7990/scm/ARINR/arinr.git_. The
commands are executables in the bin directory and should be usable straight
away.

To verify compatibility and that everything is working, run the tests with
the `run_all_tests` command.

To build the man pages and these documents, you must use `ronn`. You can
install it as a Ruby gem with _gem install ronn_. Once it is installed,
build the man pages with the following command: _ronn man/*.ronn_.

